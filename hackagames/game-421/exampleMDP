#!env python3
"""
S: set of states
A: set of actions
P: transition function
R: reward function
"""

N=10 #maxium value
p=0.4 #probability winning a bet
S = [*range(0, N+1)]
A = [*range(0, N+1)]

def main():
    V, optimal_policy = value_iterations(S, A, P, R)
    print(V)
    print(optimal_policy)
    

def value_iterations(S, A, P, R):
    V = {s: 0 for s in S}
    optimal_policy = {s: 0 for s in S}
    i = 0
    while True:
        oldV = V.copy()
        print(i)
        for s in S:
            Q = {}
            for a in A:
                Q[a] = R(s,a) + sum( (P(s_next, s, a) * oldV[s_next]) for s_next in S)
            V[s] = max(Q.values())
            optimal_policy[s] = max(Q, key=Q.get)
        if (all(oldV[s] == V[s] for s in S)):
            break
        i+=1
    return V, optimal_policy

def P(s_next, s, a):
    if s + a == s_next and a <= min(s, N-s) and 0 < s < N and a >= 1:
        return p
    elif s - a == s_next and a <= min(s, N-s) and 0 < s < N and a >= 1:
        return 1 - p
    else:
        return 0

def R(s, a):
    if s == N: #win game
        return 1
    else:
        return 0

# script
if __name__ == '__main__' :
    main()